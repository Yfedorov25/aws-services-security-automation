AWSTemplateFormatVersion: '2010-09-09'
Transform: 'AWS::Serverless-2016-10-31'
Description: Custom Lambdas for AWS Services Security

Resources:

  ServicesSecurityMonitorTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: ServicesSecurityMonitorTopic


################## S3 with Cloudfront Check ####################

  S3CloudfrontCheckBucketPolicyRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: S3CloudfrontCheckBucketPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ec2:DescribeRegions
                  - s3:GetBucketPolicy
                  - s3:GetBucketWebsite
                  - s3:ListAllMyBuckets
                  - s3:GetBucketPublicAccessBlock
                  - sns:Publish
                Resource: '*'
  
  S3CloudfrontCheckBucketPolicylambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: index.lambda_handler
      Role: !GetAtt S3CloudfrontCheckBucketPolicyRole.Arn
      Runtime: python3.8
      CodeUri: ../lambdas/S3CloudfrontCheckBucketPolicy/
      Environment:
        Variables:
          SNS_TOPIC_ARN: !Ref ServicesSecurityMonitorTopic
      Events:
        Schedule:
          Type: Schedule
          Properties:
            Schedule: rate(3 days)


################ Check EC2 Instance Types ################

  EC2InstanceTypeCheckLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: EC2InstanceTypeCheckLambdaPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ec2:DescribeRegions
                  - ec2:DescribeInstances
                  - ec2:StopInstances
                  - sns:Publish
                  - cloudtrail:LookupEvents
                Resource: '*'

  EC2InstanceTypeCheckLambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: index.lambda_handler
      Role: !GetAtt EC2InstanceTypeCheckLambdaRole.Arn
      Runtime: python3.8
      CodeUri: ../lambdas/EC2InstanceTypeCheck/
      Environment:
        Variables:
          SNS_TOPIC_ARN: !Ref ServicesSecurityMonitorTopic
      Events:
        Schedule:
          Type: Schedule
          Properties:
            Schedule: rate(3 hours)


####################### SG SSH Restriction and Cloudtrail Investigation ######################

  EC2SSHRestrictionLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: EC2SSHRestrictionLambdaPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ec2:DescribeRegions
                  - ec2:DescribeSecurityGroups
                  - ec2:RevokeSecurityGroupIngress
                  - sns:Publish
                  - cloudtrail:LookupEvents

                Resource: '*'

  EC2SSHRestrictionLambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: index.lambda_handler
      Role: !GetAtt EC2SSHRestrictionLambdaRole.Arn
      Runtime: python3.8
      CodeUri: ../lambdas/EC2SSHRestriction/
      Environment:
        Variables:
          SNS_TOPIC_ARN: !Ref ServicesSecurityMonitorTopic
      Events:
        Schedule:
          Type: Schedule
          Properties:
            Schedule: rate(3 hours)


##################### Restrict open ports other that HTTP HTTPS ######################

  RestrictCommonPortsLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: RestrictedCommonPortsLambdaPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ec2:DescribeRegions
                  - ec2:DescribeSecurityGroups
                  - ec2:RevokeSecurityGroupIngress
                  - cloudtrail:LookupEvents
                  - sns:Publish
                Resource: '*'

  RestrictCommonPortsLambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: index.lambda_handler
      Role: !GetAtt RestrictCommonPortsLambdaRole.Arn
      Runtime: python3.8
      CodeUri: ../lambdas/RestrictCommonPorts/
      Environment:
        Variables:
          SNS_TOPIC_ARN: !Ref ServicesSecurityMonitorTopic
      Events:
        Schedule:
          Type: Schedule
          Properties:
            Schedule: rate(3 hours)


###################### Cloudwatch Logs Retention Check #######################

  CloudwatchLogGroupRetentionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: CloudwatchLogGroupRetentionPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ec2:DescribeRegions
                  - logs:DescribeLogGroups
                  - logs:PutRetentionPolicy
                  - sns:Publish
                Resource: '*'

  CloudwatchLogGroupRetentionFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: index.lambda_handler
      Role: !GetAtt CloudwatchLogGroupRetentionRole.Arn
      Runtime: python3.8
      CodeUri: ../lambdas/CloudwatchLogGroupRetention/
      Environment:
        Variables:
          SNS_TOPIC_ARN: !Ref ServicesSecurityMonitorTopic
      Events:
        Schedule:
          Type: Schedule
          Properties:
            Schedule: rate(2 days)